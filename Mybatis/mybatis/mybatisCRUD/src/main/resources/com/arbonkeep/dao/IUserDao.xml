<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.arbonkeep.dao.IUserDao">

    <!--配置查询结果列名与实体类属性名对应关系-->
    <resultMap id="userMap" type="com.arbonkeep.domain.User">
        <!--主键字段的对应-->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userBirthday" column="birthday"></result>
        <result property="userSex" column="sex"></result>
        <result property="userAddress" column="address"></result>


    </resultMap>


    <!--1.配置查询所有-->
    <select id="findAll" resultMap="userMap">
    <!--查询所有-->
        <!--select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;-->
        select * from user;
    </select>

    <!--2.配置保存数据，插入新数据-->
    <insert id="save" parameterType="User">
        <!--配置插入数据后，获取插入数据的id-->
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
      <!--插入数据-->
        INSERT INTO USER (username,birthday,sex,address) VALUES (#{userName},#{userBirthday},#{userSex},#{userAddress});

    </insert>
    
    <!--3.配置更新用户，修改用户数据-->
    <update id="update" parameterType="User"><!--由于配置了别名，所以可以使用，不区分大小写-->
        <!--更新语句-->
        update user set username=#{userName},birthday=#{userBirthday},sex=#{userSex},address=#{userAddress} where id=#{userId};

    </update>

    <!--4.配置删除用户-->
    <delete id="delete" parameterType="java.lang.Integer" > <!--通过id删除所以是int类型个，可以写成Integer或java.lang.Integer-->
        <!--删除语句-->
        delete from user where id=#{id}

    </delete>

    <!--5.查询一个通过id查询-->
    <select id="selectById" parameterType="Integer" resultMap="userMap">
--         查询语句
        select * from user where id = #{id};
    </select>

    <!--6.通过名字进行模糊查询-->
    <select id="selectByName" parameterType="String" resultMap="userMap">
        -- 查询语句
        select * from user where username like #{name} <!--由于在这里没有指定模糊条件(%)s所以在测试类中需要指明-->
        <!--select * from user where username like '%${value}$%';-->

    </select>

    <!--7.获取用户的总记录条数-->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!--根据QueryVo中的条件查询用户-->
    <select id="findUserByVo" parameterType="com.arbonkeep.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.username};
    </select>

</mapper>