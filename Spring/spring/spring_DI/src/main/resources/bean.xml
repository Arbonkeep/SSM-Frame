<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--Spring中的依赖注入
        依赖注入：Dependency injection，依赖关系的维护
        IOC的作用：降低程序间的耦合（依赖）
        依赖关系的管理：使用spring管理。也就是在当前类需要用到其他类的对象，spring会提供，我们需要
                      配置即可

        依赖注入的数据：三种
            基本类型和String
            其它bean类型（在配置文件中或者注解配置过的bean）
            复杂类型或集合类型

        依赖注入的方式：三种
            第一种：使用构造函数提供
            第二种：使用set方法提供
            第三种：使用注解提供


    -->

    <!--构造函数注入
        使用标签：constructor-arg
        标签出现位置：bean标签内部
        标签中的属性(前三个用于指定给构造函数中的哪个参数赋值)
            type：用于指定注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入数据给构造函数中指定索引位置的参数赋值，索引从0开始
            name：用于指定给构造函数中指定的名称赋值
            value：用于给基本数据类型和String类型的数据赋值
            ref：用于指定其他的bean类型数据。即spring的Ioc核心容器中出现过的bean对象

        优点：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建

        缺点：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供


    -->

   <bean id="AccountService" class="com.arbonkeep.service.impl.AccountServiceImpl">
       <constructor-arg name="name" value="hah"></constructor-arg>
       <constructor-arg name="age" value="21"></constructor-arg>
       <constructor-arg name="birthday" ref="date"></constructor-arg>
   </bean>
   <!--配置一个日期对象 -->
   <bean id="date" class="java.util.Date"></bean>

    <!--set方法注入
        使用标签：property
        标签位置：bean标签内部
        标签的属性
            name：用于指定注入时所调用的set方法的名称
                注意：name的值需要是set方法去掉set将首字母小写的内容
            value：用于给基本数据类型和String类型的数据赋值
            ref：用于指定其他的bean类型数据。即spring的Ioc核心容器中出现过的bean对象

        优点：创建对象时没有明确限制，可以直接使用默认构造函数

        缺点：如果某个成员必须有值，则获取对象时有可能set方法没有执行
    -->

    <bean id="AccountService2" class="com.arbonkeep.service.impl.AccountServiceImpl2">
        <property name="name" value="李四"></property>
        <property name="age" value="20"></property>
        <property name="birthday" ref="date"></property>

    </bean>

    <!--复杂类型的注入，集合类型的注入
        需要使用set的方式完成注入。

        用于给List集合注入的标签有：list、array、set
        用于给Map结构集合注入的标签有：map、props

        总结：结构相同标签可以互换
    -->
    <bean id="AccountService3" class="com.arbonkeep.service.impl.AccountServiceImpl3">
        <property name="myStr">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>

        </property>

        <property name="myList">
            <list>
                <value>111</value>
                <value>222</value>
            </list>
        </property>

        <property name="mySet">
           <set>
               <value>aaa</value>
               <value>222</value>
               <value>ccc</value>
           </set>
        </property>


        <property name="myMap">
            <map>
                <!--写法一
                <entry key="111" value="aaa"></entry>
                <entry key="222" value="bbb"></entry>
                <entry key="333" value="ccc"></entry>
                -->
                <entry key="111">
                    <value>aaa</value>
                </entry>
                <entry key="222">
                    <value>bbb</value>
                </entry>
                <entry key="333">
                    <value>ccc</value>
                </entry>
            </map>
        </property>

        <property name="myProp">
            <props>
                <prop key="111">CCC</prop>
                <prop key="222">aaa</prop>
            </props>
        </property>
    </bean>

</beans>